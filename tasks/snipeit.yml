- name: Check if install-folder already exists
  ansible.builtin.stat:
    path: "{{ snipe_install_dir }}"
  register: snipeit_folder_check
  become: true

- name: Create folder if it doesnt exist
  ansible.builtin.file:
    path: "{{ snipe_install_dir }}"
    state: directory
    mode: '0755'
  when: not snipeit_folder_check.stat.exists
  become: true

- name: Check if .env already exists
  ansible.builtin.stat:
    path: "{{ snipe_install_dir }}/.env"
  register: env_file
  become: true

- name: Read current .env
  ansible.builtin.shell: "grep -oP 'APP_KEY=\\K\\S*' {{ snipe_install_dir }}/.env"
  register: app_key_gather
  when: env_file.stat.exists
  become: true

- name: Set gathered app_key fact
  ansible.builtin.set_fact:
    snipe_app_key: "{{ app_key_gather.stdout }}"
  when: env_file.stat.exists
  become: true

- name: "Checkout Snipe-IT v{{ snipe_install_version }}"
  ansible.builtin.git:
    repo: 'https://github.com/snipe/snipe-it.git'
    dest: "{{ snipe_install_dir }}"
    version: "v{{ snipe_install_version }}"
  become: true

- name: Write .env file to snipe-it directory
  ansible.builtin.template:
    src: .env.j2
    dest: "{{ snipe_install_dir }}/.env"
    owner: www-data
    group: www-data
    mode: '0444'
  become: true

- name: Install composer
  ansible.builtin.shell: set -o pipefail && curl -sS https://getcomposer.org/installer | php{{ snipe_php_ver }}
  args:
    chdir: "{{ snipe_install_dir }}"
    executable: /bin/bash
    creates: "{{ snipe_install_dir }}/composer.phar"
  become: true

- name: Install snipe dependencies
  ansible.builtin.shell: "export COMPOSER_ALLOW_SUPERUSER=1; php{{ snipe_php_ver }} composer.phar install --no-dev --prefer-source"
  args:
    chdir: "{{ snipe_install_dir }}"
    creates: "{{ snipe_install_dir }}/vendor"
  become: true

- name: Dump auto-load
  ansible.builtin.shell: "export COMPOSER_ALLOW_SUPERUSER=1; php{{ snipe_php_ver }} composer.phar dump-autoload"
  args:
    chdir: "{{ snipe_install_dir }}"
  changed_when: true
  become: true

- name: Generate app_key
  ansible.builtin.command: php{{ snipe_php_ver }} artisan key:generate --force
  args:
    chdir: "{{ snipe_install_dir }}"
  when: snipe_app_key == 'ChangeMe'
  become: true

- name: Run migrate commands
  ansible.builtin.command: php{{ snipe_php_ver }} artisan migrate --force
  args:
    chdir: "{{ snipe_install_dir }}"
  changed_when: true
  become: true

- name: Clear config
  ansible.builtin.command: php{{ snipe_php_ver }} artisan config:clear
  args:
    chdir: "{{ snipe_install_dir }}"
  changed_when: true
  become: true

- name: Clear cache
  ansible.builtin.command: php{{ snipe_php_ver }} artisan config:cache
  args:
    chdir: "{{ snipe_install_dir }}"
  changed_when: true
  become: true

- name: Reset ownership
  ansible.builtin.file:
    path: "{{ snipe_install_dir }}"
    owner: www-data
    group: www-data
    recurse: true
  become: true
  notify: Git dubious ownership
